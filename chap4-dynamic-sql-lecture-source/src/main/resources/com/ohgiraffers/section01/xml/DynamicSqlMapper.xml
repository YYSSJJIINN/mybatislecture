<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

    <resultMap type="com.ohgiraffers.common.MenuDTO" id="menuResultMap">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <!--
    설명. <![CDATA[ ... ]]> : Character Data의 약어로, XML 문서 내에서 문자열 데이터를 나타내는 방식 중 하나다.
     XML 파서는 '<'와 '>', '&' 같은 문자를 평문(plaintext)이 아닌 키워드나 구분자 같은 특별한 문자로 인식하게 된다.
     이 문자들을 포함한 텍스트 데이터를 안전하게 포함시키기 위해 CDATA 섹션을 사용할 수 있다.
     ===========================================================================================================
     주의사항!
     - CDATA 섹션 안에 "]]>" 문자열이 포함될 수 없음 : 이는 CDATA 섹션의 종료를 나타내는 구문이기 때문.
     - CDATA 섹션은 XML 파서에 의해 구문 분석되지 않으므로, 이 안에 포함된 내용은 XML 구문 오류 체크의 대상이 아님.
    -->

    <!-- 필기. <if> 태그 : test 속성의 조건이 true일 때만 엘리먼트 내 SQL 구문을 원본 쿼리에 포함시킨다. -->
    <!--
        사용자가 입력한 소지금액을 기준으로
        - 1만원 이하
        - 1만원 초과 2만원 이하
        - 2만원 초과 3만원 이하
        - 3만원 초과
        를 구분해 적절한 메뉴 가격을 필터링하여 조회.
    -->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        select
            m.menu_code,
            m.menu_name,
            m.menu_price,
            m.category_code,
            m.orderable_status
        from
            tbl_menu m
        where
            m.orderable_status = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            and m.menu_price < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            and m.menu_price between 10000 and #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            and m.menu_price between 20000 and #{ price }
        </if>
        <if test="price gt 30000">
            and m.menu_price between 30000 and #{ price }
        </if>
        order by
            m.menu_price desc
    </select>
    <!--
    설명. MyBatis의 동적 쿼리에서 사용되는 조건 설명:
        - test 속성: 조건식을 작성하며, MyBatis에서 OGNL(Object-Graph Navigation Language) 표현식을 지원.
        - gte (greater than or equal): 해당 값이 크거나 같은 조건을 의미 (>=).
        - lte (less than or equal): 해당 값이 작거나 같은 조건을 의미 (<=).
        - gt (greater than): 해당 값이 큰 조건을 의미 (>).
        - lt (less than): 해당 값이 작은 조건을 의미 (<).
    -->

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
            m.menu_code,
            m.menu_name,
            m.menu_price,
            m.category_code,
            m.orderable_status
        from
            tbl_menu m
        <if test="condition == 'category'">
            join tbl_category c on (m.category_code = c.category_code)
        </if>
        where
            m.orderable_status = 'Y'
        <if test="condition == 'name'">
            and m.menu_name LIKE CONCAT('%', #{ value }, '%')
        </if>
        <if test="condition == 'category'">
            and c.category_name = #{ value }
        </if>
        order by
            m.menu_code;
    </select>

    <!--
        필기. <choose>(when/otherwise) 태그 : Java의 switch-case문처럼 역할을 한다.
        <when> 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함한다.
        어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함한다.
        ================================================================================
        사용하는 방법은 아래와 같다:
        <choose>
            <when test=" 조건식1 ">
                쿼리 구문1
            </when>
            <when test=" 조건식2 ">
                쿼리 구문2
            </when>
            . . .
            <otherwise>
                쿼리 구문n
            </otherwise>
        </choose>
    -->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
            m.menu_code,
            m.menu_name,
            m.menu_price,
            m.category_code,
            m.orderable_status
        from
            tbl_menu m
        where
            m.orderable_status = 'Y'
        <choose>
            <when test="value == '식사'">
                and m.category_code in (1, 4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                and m.category_code in (2, 8, 9, 10)
            </when>
            <otherwise>
                and m.category_code in (3, 11, 12)
            </otherwise>
        </choose>
        order by
            m.menu_code
    </select>

    <!-- 필기. <where> 태그 :
            엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여준다.
            또한 where엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
            단, name 부분에 where를 빼주지 않으면 where where로 where이 2개 생성될 수 있다.
            엘리먼트 구문이 AND나 OR로 시작하면 자동으로 해당 단어를 지워준다. -->

    <!-- 필기. <trim> 태그 :
            조회 조건에 AND 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 등
            where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
             1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
             2. prefixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
             3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
             4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제 -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
            A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{ value }
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
            A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.ORDERABLE_STATUS
        FROM
            TBL_MENU A
        <!-- 설명. 문제발생 상황 : 카테고리로만 조회하는 경우 WHERE가 붙지 않아 쿼리 문법 오류로 조회 불가하다. -->
        <!--
            <if test="nameValue != null">
                WHERE A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        -->


        <!-- 필기. 해결방법 1: <where> 태그 이용  -->
        <!--
            <where>
                <if test="nameValue != null">
                    A.MENU_NAME LIKE CONCAT('%',  #{ nameValue }, '%')
                </if>
                <if test="categoryValue != null">
                    AND A.CATEGORY_CODE = #{ categoryValue }
                </if>
            </where>
        -->

        <!-- 필기. 해결방법 2: <trim> 태그 이용 -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                A.MENU_NAME LIKE CONCAT('%', #{ nameValue }, '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>

        <!-- 필기. (추가)
                  <bind> 태그 : OGNL 표현식을 이용하여 변수를 만든 후 바인딩
                               _parameter가 파라미터로 전달된 Object를 의미하며, collection의 경우 get, Object의 경우 getter를 이용 -->
        <!--
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
                A.MENU_NAME LIKE #{ namePattern }
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
        -->
    </select>



    <!-- 필기. <set> 태그 : set 엘리먼트의 구문이 있으면 SET을 자동으로 추가한다.  -->
    <update id="modifyMenu" parameterType="hashmap">

        <!-- 설명. update의 경우 모든 컬럼에 대하여 수정할 값을 입력한다는 가정하에 아래처럼 쿼리문을 작성할 수 있다.
                  하지만 값을 입력한 일부 컬럼만 값을 변경하려면, 아래와 같은 쿼리문은 수정을 원하지 않는 값까지 변경할 가능성이 있다.
                  따라서 값을 입력한 일부 컬럼만 수정하기 위해 <if> 태그를 활용할 수 있다. -->
        <!--
            UPDATE
                   TBL_MENU
               SET MENU_NAME = #{ name }
                 , CATEGORY_CODE = #{ categoryCode }
                 , ORDERABLE_STATUS = #{ orderableStatus }
             WHERE MENU_CODE = #{ code }
         -->

        <!-- 설명. 문제 발생 상황 : 메뉴명 값을 입력하지 않은 경우 SET이 붙지 않아 쿼리 오류로 수정 불가하다. -->
        <!--
             UPDATE
                    TBL_MENU
             <if test="name != null and name != ''">
                SET MENU_NAME = #{ name }
             </if>
             <if test="categoryCode != null and categoryCode gt 0">
                  , CATEGORY_CODE = #{ categoryCode }
             </if>
             <if test="orderableStatus != null and orderableStatus != ''">
                  , ORDERABLE_STATUS = #{ orderableStatus }
             </if>
              WHERE MENU_CODE = #{ code }
     -->

        <!-- 필기. 해결방안 1: <set> 태그 이용 -->
        UPDATE
        TBL_MENU
        <set>
            <if test="name != null and name != ''">
                MENU_NAME = #{ name }
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                ,CATEGORY_CODE = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                ,ORDERABLE_STATUS = #{ orderableStatus },
            </if>
        </set>
        WHERE MENU_CODE = #{ code }

        <!-- 필기. 해결방안 2: <trim> 태그 이용 -->
        <!--
             UPDATE
                   TBL_MENU
             <trim prefix="SET" prefixOverrides=",">
                <if test="name != null and name != ''">
                    , MENU_NAME = #{ name }
                </if>
                <if test="categoryCode != null and categoryCode gt 0">
                    , CATEGORY_CODE = #{ categoryCode }
                </if>
                <if test="orderableStatus != null and orderableStatus != ''">
                    , ORDERABLE_STATUS = #{ orderableStatus }
                </if>
            </trim>
            WHERE MENU_CODE = #{ code }
        -->
    </update>

    <!--
필기. <foreach>태그 :
    Java의 for문과 같은 역할을 하는 것으로, 동적 쿼리를 구현할 때 collection에 대한 반복 처리를 제공한다
    1. collection 속성 : 반복을 수행할 대상
    2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
    3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
    4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
    5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자
 -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM
        TBL_MENU A
        WHERE
        A.ORDERABLE_STATUS = 'Y' AND
        A.MENU_CODE IN
        <!-- 방법 1. -->
        <!--
        설명. 만약 randomMenuCodeList에 [32, 12, 8, 25, 2]이 전달되었다고 가정하면, 최종적으로 생성되는 SQL은 아래와 같다:
         AND A.MENU_CODE IN (32, 12, 8, 25, 2)
         -->
        <!--        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">-->
        <!--        </foreach>-->

        <!-- 방법 2. -->
        <!-- 필기. parameter 객체로 받아오지 않고, static 필드 혹은 static 메소드에 직접 접근하여 직접 반환받아 사용할 수 있다.
                    - static 필드 접근 시 collection 속성 : @풀클래스명@필드명
                    - static 메소드 접근 시 collection 속성 : @풀클래스명@메소드명()                                    -->

        <!-- 설명. 아래처럼 static 메소드에 직접 접근해 사용하면 mapper 인터페이스와 service에서 파라미터 넘겨주지 않아도 된다.
                   (아래 테스트 할 때 메소드의 인자와 인터페이스 매개변수 빼고 테스트 성공하는 걸 확인해본다.) -->
        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()"
                 item="menuCode" open="(" separator=", " close=")">
            #{ menuCode }
        </foreach>
    </select>
</mapper>